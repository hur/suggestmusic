from bs4 import BeautifulSoup
import requests
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import spotipy.util as util
import base64
from dotenv import load_dotenv

def scrapeMusicMap(artist):

    url = f"https://www.music-map.com/{artist}.html" 
    page = requests.get(url)

    if page.status_code != 200:
        print("Page load unsuccesful")
        return scrapeMusicMap()

    soup = BeautifulSoup(page.text, 'html.parser')
    sw = soup.find('div', id='gnodMap')

    if not sw:
        print("artist not found")
        return scrapeMusicMap()

    similar_artists = sw.find_all('a', class_='S')
    result = []

    for artist in similar_artists:
        result.append(artist.text)

    return result[1:] # The first element of results is the top song of the user-chosen artist

def get_artist(name):
    results = sp2.search(q='' + name, type='artist')
    items = results['artists']['items']
    if len(items) > 0:
	# Get the top search result
        return items[0]
    else:
        return None

def get_artist_image(name):
    results = sp2.search(q='' + name, type='artist')
    items = results['artists']['items']
    if len(items) > 0:
        artist = items[0]
        return base64.b64encode(requests.get(artist['images'][0]['url']).content)
    return None

if __name__ == '__main__':
    load_dotenv() # Gets client id and secret from .env file
    username = input("Enter spotify username\n")
    token = util.prompt_for_user_token(username, 'playlist-modify-public playlist-modify-private',redirect_uri = 'https://example.com/callback/')
    if token:
        sp2 = spotipy.Spotify(auth=token)
    else:
        print("no token")

    artist_input = input("Enter artist name\n")
    playlist_name = artist_input + " recommendations"
    similar_artists = scrapeMusicMap(artist_input)
    track_ids = []
    for artist in similar_artists:
        try:
            page = get_artist(artist)
            artist_id = page['uri']
            top_tracks = sp2.artist_top_tracks(artist_id)
            track = top_tracks['tracks'][0]['uri']
            track_ids.append(track)
        except Exception as e:
            print(e)
    if track_ids:
        playlist = sp2.user_playlist_create(username, playlist_name, public=True, description='autogenerated')
        playlist_id = playlist['uri']
        sp2.user_playlist_add_tracks(username, playlist_id, track_ids)

        
    else:
        print("track_ids is empty")

